diff --git a/py_src/normal_map_scanner.py b/py_src/normal_map_scanner.py
index 125521b..2430b5a 100644
--- a/py_src/normal_map_scanner.py
+++ b/py_src/normal_map_scanner.py
@@ -6,9 +6,9 @@ from tkinter import BitmapImage
 from PIL import Image, ImageChops
 
 # Properties
-# test = "Real input"
+test = "Real input"
 # test = "All black input"
-test = "All white input"
+# test = "All white input"
 if(test == "Real input"):
     image_size = np.array([1200, 1200])  # px
     object_size = np.array([20, 20])  # cm
@@ -121,7 +121,8 @@ def main():
                      (np.array((pixel_size[0], (-pixel_size[1]))) / 2)) - (np.array((object_size[0], (-object_size[1]))) / 2)
         pixel_pos = np.append(pixel_pos, 0.)  # Z axis
 
-        N_vector = np.zeros(3, float)
+        #N_vector = np.zeros(3, float)
+        N_vectors = np.zeros((8, 3))
         for angle_idx in range(angles_rad.size):
             # Vector pointing to the light source
             L_vector = lamp_pos[angle_idx] - pixel_pos
@@ -129,7 +130,19 @@ def main():
             # equal to this should be white (255,255,255). For opposite
             # vector color would be black (0,0,0).
             weight = input[angle_idx][y][x] / 765.0
-            N_vector += L_vector * weight
+            NL_angle = (1 - weight) * np.pi
+            # To move a vector without using quaterions it is moved on its axis created parallel to diagonal of X and Y values of the vector
+            diagonal = magnitude(np.array(L_vector[:2]))
+            dz_mag = magnitude(np.array((diagonal, L_vector[2])))
+            new_diagonal = np.cos(
+                NL_angle) * dz_mag  # x axis
+            N_vectors[angle_idx][2] = np.sin(
+                NL_angle) * dz_mag  # y axis
+            # Diagonal change ratio to get x and y back
+            diag_ratio = new_diagonal / diagonal
+            N_vectors[angle_idx][:2] = diag_ratio * L_vector[:2]
+        # Averaging of the N vector results
+        N_vector = np.average(N_vectors, axis=0)
         output[y][x] = normalize(N_vector)
     print("Normalmap vectors calculated in %d ms" %
           ((time.time() - start_time) * 1000))
